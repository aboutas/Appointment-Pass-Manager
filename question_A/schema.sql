/* Create basic Enumerations */
DROP DATABASE finalDB
CREATE DATABASE finalDB
USE finalDB

CREATE TABLE DEGREE_VALUES(
	NAME NVARCHAR(50) COLLATE SQL_Latin1_General_CP1253_CI_AI)

CREATE TABLE CONTACT_AVAILABILITY_VALUES(
	ID INT PRIMARY KEY,
	NAME NVARCHAR(200) COLLATE SQL_Latin1_General_CP1253_CI_AI)

/*Analysis of nvarchar[] input : contact availability*/
CREATE TABLE CONTACT_AVAILABILITY_MAPPING_VALUES(
	ID INT PRIMARY KEY, 
	CONTACT_AVAILABILITY_VALUE_ID INT,
	DAY NVARCHAR(20) COLLATE SQL_Latin1_General_CP1253_CI_AI, 
	TIME_FROM INT, 
	TIME_TO INT)
GO

-- Function for checking degree enumeration correctness
CREATE FUNCTION IS_DEGREE_VALID (
    @input NVARCHAR(50)
)
RETURNS VARCHAR(5)
AS
BEGIN
    IF EXISTS (SELECT NAME FROM DEGREE_VALUES WHERE NAME = @input)
        return 'True'
    return 'False'
END 

GO

--Function for checking contact availability enumeration correctness
CREATE FUNCTION IS_CONTACT_AVAILABILITY_VALID (
    @input NVARCHAR(200)
)
RETURNS VARCHAR(5) 
AS
BEGIN
    IF EXISTS (SELECT NAME FROM CONTACT_AVAILABILITY_VALUES WHERE NAME = @input)
        return 'True'
    return 'False'
END 

GO
--Main Customer table
CREATE TABLE CUSTOMERS(
	ID INT PRIMARY KEY,
	FIRST_NAME VARCHAR(50) NOT NULL,
	LAST_NAME VARCHAR(50) NOT NULL,
	PHONE VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(320) NOT NULL 
		CHECK(EMAIL LIKE '%_@__%.__%'),
	ADDRESS VARCHAR(100) NOT NULL,
	DEGREE VARCHAR(50) COLLATE SQL_Latin1_General_CP1253_CI_AI
		CHECK(dbo.IS_DEGREE_VALID(DEGREE)='True'),
	AGE INT NOT NULL 
		CHECK(AGE>0 AND AGE<100) ,
	GENDER VARCHAR(20) NOT NULL 
		CHECK(GENDER IN('MALE','FEMALE','OTHER')),
	GRADE DECIMAL(3,2) 
		CHECK(GRADE>=0 AND GRADE<=10),
	CONTACT_AVAILABILITY VARCHAR(200) COLLATE SQL_Latin1_General_CP1253_CI_AI NOT NULL 
		CHECK(dbo.IS_CONTACT_AVAILABILITY_VALID(CONTACT_AVAILABILITY)='True')	
)

GO

--Help function for sorting Days
CREATE FUNCTION DAYS_TO_NUMBERS (
    @day NVARCHAR(20)
)
RETURNS INT
AS
BEGIN
	DECLARE @output AS INT
	SELECT @output =  CASE 
		WHEN @day = N'ΔΕΥΤΕΡΑ' THEN 1
		WHEN @day = N'ΤΡΙΤΗ' THEN   2
		WHEN @day = N'ΤΕΤΑΡΤΗ' THEN  3
		WHEN @day = N'ΠΕΜΠΤΗ' THEN  4
		WHEN @day = N'ΠΑΡΑΣΚΕΥΗ' THEN  5
	END	;
	RETURN  @output;
END 
GO
-- Main sorting function for exercise 
CREATE FUNCTION SORT_CUSTOMERS (
    @day NVARCHAR(50),
    @hour INT
)
RETURNS TABLE
AS RETURN(
	SELECT top(100000) camv.day, camv.TIME_FROM, camv.TIME_TO, c.ID, c.FIRST_NAME, c.LAST_NAME ,c.AGE, c.DEGREE , c.GRADE, c.GENDER ,c.PHONE , c.EMAIL , c.ADDRESS   FROM CUSTOMERS c 
	
	JOIN CONTACT_AVAILABILITY_VALUES  cav
	ON c.CONTACT_AVAILABILITY = cav.NAME 
	JOIN CONTACT_AVAILABILITY_MAPPING_VALUES camv 
	ON cav.ID = camv.CONTACT_AVAILABILITY_VALUE_ID
	WHERE (camv.TIME_FROM <= @hour AND camv.TIME_TO >= @hour  AND   dbo.DAYS_TO_NUMBERS(DAY) = dbo.DAYS_TO_NUMBERS(@day) ) 
		or 	dbo.DAYS_TO_NUMBERS(DAY) > dbo.DAYS_TO_NUMBERS(@day)
	ORDER BY 
		CASE
			WHEN camv.DAY = N'ΔΕΥΤΕΡΑ' THEN 1
			WHEN camv.DAY = N'ΤΡΙΤΗ' THEN 2
			WHEN camv.DAY = N'ΤΕΤΑΡΤΗ' THEN 3
			WHEN camv.DAY = N'ΠΕΜΠΤΗ' THEN 4
			WHEN camv.DAY = N'ΠΑΡΑΣΚΕΥΗ' THEN 5
		END ASC,
		camv.TIME_FROM ASC ,
	    camv.TIME_TO ASC ,
		c.ID ASC ,
		c.LAST_NAME ,
		c.FIRST_NAME,
		c.PHONE , 
		c.EMAIL , 
		c.ADDRESS,
		c.DEGREE ,
		c.AGE,  
		c.GRADE)
GO
--SELECT * FROM dbo.SORT_CUSTOMERS(N'ΠΕΜΠΤΗ' , 11);
